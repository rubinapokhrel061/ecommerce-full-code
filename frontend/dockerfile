<<<<<<< HEAD
=======
# # Use Node.js LTS image
# FROM node:18

# # Set working directory
# WORKDIR /app

# # Copy and install dependencies
# COPY package*.json ./
# RUN npm install

# # Copy .env file
# COPY .env.production .env

# # Copy all files
# COPY . .

# # Expose the frontend port (default is 3000)
# EXPOSE 3000

# # Start Next.js in development mode
# CMD ["npm", "run", "dev"]



>>>>>>> 5ae4926402c7c67199748d7eb40cb7a154e96db9
# Use official Node.js LTS version
FROM node:18

WORKDIR /app

<<<<<<< HEAD
# Accept the NODE_OPTIONS argument passed from docker-compose.yml
ARG NODE_OPTIONS

# Make it an environment variable available during the build (and subsequent runs)
ENV NODE_OPTIONS ${NODE_OPTIONS}

=======
>>>>>>> 5ae4926402c7c67199748d7eb40cb7a154e96db9
# Copy package files and install dependencies
COPY package*.json ./
RUN npm install

# Copy environment variables
COPY .env.production .env

# Copy source code
COPY . .

# Build the Next.js project
<<<<<<< HEAD
# The NODE_OPTIONS set above will apply to this command
=======
>>>>>>> 5ae4926402c7c67199748d7eb40cb7a154e96db9
RUN npm run build

# Expose the port
EXPOSE 3000

<<<<<<< HEAD
# The ENV NODE_OPTIONS line above will also apply to the CMD,
# so this line is redundant if ARG/ENV is used early, but harmless.
# You can remove it or keep it; the earlier ENV takes precedence if set.
# ENV NODE_OPTIONS=--max-old-space-size=4096 # This line is now redundant

# Run the production build
CMD ["npm", "run", "start"]
=======
# Set node memory limit and run production build
ENV NODE_OPTIONS=--max-old-space-size=4096
CMD ["npm", "run", "start"]
>>>>>>> 5ae4926402c7c67199748d7eb40cb7a154e96db9
